/**
 * This file was generated by Nexus Schema
 * Do not make changes to this file directly
 */

import type { core } from 'nexus';
import type { ValidateResolver } from 'nexus-validate';

import type { Context } from './../context';

declare global {
  interface NexusGenCustomInputMethods<TypeName extends string> {
    /**
     * A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
     */
    date<FieldName extends string>(
      fieldName: FieldName,
      opts?: core.CommonInputFieldConfig<TypeName, FieldName>,
    ): void; // "DateTime";
    /**
     * The `BigInt` scalar type represents non-fractional signed whole numeric values.
     */
    bigInt<FieldName extends string>(
      fieldName: FieldName,
      opts?: core.CommonInputFieldConfig<TypeName, FieldName>,
    ): void; // "BigInt";
  }
}
declare global {
  interface NexusGenCustomOutputMethods<TypeName extends string> {
    /**
     * A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
     */
    date<FieldName extends string>(
      fieldName: FieldName,
      ...opts: core.ScalarOutSpread<TypeName, FieldName>
    ): void; // "DateTime";
    /**
     * The `BigInt` scalar type represents non-fractional signed whole numeric values.
     */
    bigInt<FieldName extends string>(
      fieldName: FieldName,
      ...opts: core.ScalarOutSpread<TypeName, FieldName>
    ): void; // "BigInt";
  }
}

declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
  CreateTripInput: {
    // input type
    adultCount?: number | null; // Int
    budget: number; // Float!
    childCount?: number | null; // Int
    destinationId: number; // Int!
    endDate: NexusGenScalars['DateTime']; // DateTime!
    startDate: NexusGenScalars['DateTime']; // DateTime!
    title: string; // String!
    travelSize: NexusGenEnums['TravelSize']; // TravelSize!
  };
  CreateUserInput: {
    // input type
    email: string; // String!
    id: string; // String!
    password: string; // String!
    userType: NexusGenEnums['UserType']; // UserType!
  };
}

export interface NexusGenEnums {
  TravelSize: 'COUPLE' | 'FAMILY' | 'GROUP' | 'SOLO';
  UserType: 'BUSINESS_OPERATOR' | 'TRAVELER';
}

export interface NexusGenScalars {
  String: string;
  Int: number;
  Float: number;
  Boolean: boolean;
  ID: string;
  BigInt: any;
  DateTime: any;
}

export interface NexusGenObjects {
  Destination: {
    // root type
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    id: number; // Int!
    name: string; // String!
    updatedAt: NexusGenScalars['DateTime']; // DateTime!
  };
  Image: {
    // root type
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    id: string; // ID!
    name?: string | null; // String
    size?: number | null; // Int
    updatedAt: NexusGenScalars['DateTime']; // DateTime!
    url: string; // String!
  };
  Mutation: {};
  Query: {};
  Traveler: {
    // root type
    contactNumber?: string | null; // String
    firstName?: string | null; // String
    id: number; // Int!
    lastName?: string | null; // String
  };
  Trip: {
    // root type
    adultCount?: number | null; // Int
    budget: number; // Float!
    childCount?: number | null; // Int
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    endDate: NexusGenScalars['DateTime']; // DateTime!
    id: number; // Int!
    startDate: NexusGenScalars['DateTime']; // DateTime!
    title: string; // String!
    travelSize: NexusGenEnums['TravelSize']; // TravelSize!
    updatedAt: NexusGenScalars['DateTime']; // DateTime!
  };
  User: {
    // root type
    email: string; // String!
    id: string; // String!
    password: string; // String!
    userType: NexusGenEnums['UserType']; // UserType!
  };
}

export interface NexusGenInterfaces {}

export interface NexusGenUnions {}

export type NexusGenRootTypes = NexusGenObjects;

export type NexusGenAllTypes = NexusGenRootTypes &
  NexusGenScalars &
  NexusGenEnums;

export interface NexusGenFieldTypes {
  Destination: {
    // field return type
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    id: number; // Int!
    image: NexusGenRootTypes['Image'] | null; // Image
    name: string; // String!
    updatedAt: NexusGenScalars['DateTime']; // DateTime!
  };
  Image: {
    // field return type
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    id: string; // ID!
    name: string | null; // String
    size: number | null; // Int
    updatedAt: NexusGenScalars['DateTime']; // DateTime!
    url: string; // String!
  };
  Mutation: {
    // field return type
    createTrip: NexusGenRootTypes['Trip']; // Trip!
    createUser: NexusGenRootTypes['User']; // User!
  };
  Query: {
    // field return type
    travelerTrips: NexusGenRootTypes['Trip'][]; // [Trip!]!
  };
  Traveler: {
    // field return type
    contactNumber: string | null; // String
    firstName: string | null; // String
    id: number; // Int!
    image: NexusGenRootTypes['Image'] | null; // Image
    lastName: string | null; // String
    trips: NexusGenRootTypes['Trip'][]; // [Trip!]!
  };
  Trip: {
    // field return type
    adultCount: number | null; // Int
    budget: number; // Float!
    childCount: number | null; // Int
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    destination: NexusGenRootTypes['Destination'] | null; // Destination
    endDate: NexusGenScalars['DateTime']; // DateTime!
    id: number; // Int!
    startDate: NexusGenScalars['DateTime']; // DateTime!
    title: string; // String!
    travelSize: NexusGenEnums['TravelSize']; // TravelSize!
    updatedAt: NexusGenScalars['DateTime']; // DateTime!
  };
  User: {
    // field return type
    email: string; // String!
    id: string; // String!
    password: string; // String!
    traveler: NexusGenRootTypes['Traveler'] | null; // Traveler
    userType: NexusGenEnums['UserType']; // UserType!
  };
}

export interface NexusGenFieldTypeNames {
  Destination: {
    // field return type name
    createdAt: 'DateTime';
    id: 'Int';
    image: 'Image';
    name: 'String';
    updatedAt: 'DateTime';
  };
  Image: {
    // field return type name
    createdAt: 'DateTime';
    id: 'ID';
    name: 'String';
    size: 'Int';
    updatedAt: 'DateTime';
    url: 'String';
  };
  Mutation: {
    // field return type name
    createTrip: 'Trip';
    createUser: 'User';
  };
  Query: {
    // field return type name
    travelerTrips: 'Trip';
  };
  Traveler: {
    // field return type name
    contactNumber: 'String';
    firstName: 'String';
    id: 'Int';
    image: 'Image';
    lastName: 'String';
    trips: 'Trip';
  };
  Trip: {
    // field return type name
    adultCount: 'Int';
    budget: 'Float';
    childCount: 'Int';
    createdAt: 'DateTime';
    destination: 'Destination';
    endDate: 'DateTime';
    id: 'Int';
    startDate: 'DateTime';
    title: 'String';
    travelSize: 'TravelSize';
    updatedAt: 'DateTime';
  };
  User: {
    // field return type name
    email: 'String';
    id: 'String';
    password: 'String';
    traveler: 'Traveler';
    userType: 'UserType';
  };
}

export interface NexusGenArgTypes {
  Mutation: {
    createTrip: {
      // args
      data: NexusGenInputs['CreateTripInput']; // CreateTripInput!
    };
    createUser: {
      // args
      data: NexusGenInputs['CreateUserInput']; // CreateUserInput!
    };
  };
  Query: {
    travelerTrips: {
      // args
      userId: string; // String!
    };
  };
}

export interface NexusGenAbstractTypeMembers {}

export interface NexusGenTypeInterfaces {}

export type NexusGenObjectNames = keyof NexusGenObjects;

export type NexusGenInputNames = keyof NexusGenInputs;

export type NexusGenEnumNames = keyof NexusGenEnums;

export type NexusGenInterfaceNames = never;

export type NexusGenScalarNames = keyof NexusGenScalars;

export type NexusGenUnionNames = never;

export type NexusGenObjectsUsingAbstractStrategyIsTypeOf = never;

export type NexusGenAbstractsUsingStrategyResolveType = never;

export type NexusGenFeaturesConfig = {
  abstractTypeStrategies: {
    isTypeOf: false;
    resolveType: true;
    __typename: false;
  };
};

export interface NexusGenTypes {
  context: Context;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  inputTypeShapes: NexusGenInputs & NexusGenEnums & NexusGenScalars;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  fieldTypeNames: NexusGenFieldTypeNames;
  allTypes: NexusGenAllTypes;
  typeInterfaces: NexusGenTypeInterfaces;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes:
    | NexusGenTypes['inputNames']
    | NexusGenTypes['enumNames']
    | NexusGenTypes['scalarNames'];
  allOutputTypes:
    | NexusGenTypes['objectNames']
    | NexusGenTypes['enumNames']
    | NexusGenTypes['unionNames']
    | NexusGenTypes['interfaceNames']
    | NexusGenTypes['scalarNames'];
  allNamedTypes:
    | NexusGenTypes['allInputTypes']
    | NexusGenTypes['allOutputTypes'];
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractTypeMembers: NexusGenAbstractTypeMembers;
  objectsUsingAbstractStrategyIsTypeOf: NexusGenObjectsUsingAbstractStrategyIsTypeOf;
  abstractsUsingStrategyResolveType: NexusGenAbstractsUsingStrategyResolveType;
  features: NexusGenFeaturesConfig;
}

declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {}
  interface NexusGenPluginInputTypeConfig<TypeName extends string> {}
  interface NexusGenPluginFieldConfig<
    TypeName extends string,
    FieldName extends string,
  > {
    /**
     * Validate mutation arguments.
     */
    validate?: ValidateResolver<TypeName, FieldName>;
  }
  interface NexusGenPluginInputFieldConfig<
    TypeName extends string,
    FieldName extends string,
  > {}
  interface NexusGenPluginSchemaConfig {}
  interface NexusGenPluginArgConfig {}
}
