### This file was generated by Nexus Schema
### Do not make changes to this file directly


type Accommodation {
  amenities: [Amenity!]!
  id: Int!
  poiId: String!
}

type Amenity {
  id: Int!
  name: String!
}

"""
The `BigInt` scalar type represents non-fractional signed whole numeric values.
"""
scalar BigInt

type Category {
  id: Int!
  name: String!
}

input CreateExpenseInput {
  amount: Float!
  category: ExpenseCategory!
  dateSpent: DateTime!
  note: String
}

input CreateTripInput {
  budget: Float!
  endDate: DateTime
  isAccommodationIncluded: Boolean!
  isFoodIncluded: Boolean!
  isTransportationIncluded: Boolean!
  startDate: DateTime!
  startingLocation: JSON!
  timeSlots: JSON!
  title: String!
  travelSize: TravelSize!
  travelerCount: Int!
}

input CreateUserInput {
  email: String!
  firstName: String!
  id: String!
  lastName: String!
  password: String!
  type: UserType!
}

type DailyItinerary {
  accommodationCost: Float!
  attractionCost: Float!
  createdAt: DateTime!
  dailyItineraryPois: [DailyItineraryPoi!]!
  dayIndex: Int!
  foodCost: String!
  id: Int!
  transportationCost: Float!
  updatedAt: DateTime!
}

type DailyItineraryPoi {
  dailyItineraryId: Int!
  distance: Float!
  duration: Float!
  id: Int!
  order: Int!
  poi: Poi!
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

type Expense {
  amount: Float!
  category: ExpenseCategory!
  createdAt: DateTime!
  dateSpent: DateTime!
  id: Int!
  note: String!
  updatedAt: DateTime!
}

enum ExpenseCategory {
  ACCOMMODATION
  ACTIVITY
  FOOD
  OTHER
  SHOPPING
  SIGHTSEEING
  TRANSPORTATION
}

type Image {
  createdAt: DateTime!
  id: String!
  updatedAt: DateTime!
  url: String!
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

type Mutation {
  createExpense(data: CreateExpenseInput!, tripId: Int!): Expense!
  createTrip(data: CreateTripInput!, userId: String!): Trip!
  createUser(input: CreateUserInput!): User!
  deleteExpense(id: Int!): Expense!
  deleteTrip(id: Int!): Trip!
  updateExpense(data: UpdateExpenseInput!, id: Int!): Expense!
}

type OperatingHour {
  closeTime: DateTime
  day: Int!
  id: Int!
  is24Hours: Boolean!
  isClosed: Boolean!
  openTime: DateTime
}

type Poi {
  accommodation: Accommodation
  address: String!
  categories: [Category!]!
  contactNumber: String!
  createdAt: DateTime!
  description: String
  id: String!
  images: [PoiImage!]!
  isAttraction: Boolean!
  latitude: Float!
  longitude: Float!
  name: String!
  operatingHours: [OperatingHour!]!
  price: String!
  restaurant: Restaurant
  updatedAt: DateTime!
  userId: String
  visitDuration: Float!
}

type PoiImage {
  id: Int!
  image: Image!
  imageId: String!
  poiId: String!
}

type Query {
  poi(poiId: String!): Poi!
  pois(userId: String!): [Poi!]!
  trip(id: Int!): Trip!
  trips(userId: String!): [Trip!]!
  user(id: String!): User!
}

type Restaurant {
  atmospheres: [String!]!
  id: Int!
  poiId: String!
}

type Stamp {
  createdAt: DateTime!
  dateCollected: DateTime!
  id: Int!
  title: String!
  updatedAt: DateTime!
}

enum TravelSize {
  COUPLE
  FAMILY
  GROUP
  SOLO
}

type Trip {
  budget: Float!
  createdAt: DateTime!
  dailyItineraries: [DailyItinerary!]!
  endDate: DateTime!
  expenses: [Expense!]!
  id: Int!
  isAccommodationIncluded: Boolean!
  isFoodIncluded: Boolean!
  isTransportationIncluded: Boolean!
  startDate: DateTime!
  startingLocation: JSON!
  timeSlots: JSON!
  title: String!
  travelSize: TravelSize!
  travelerCount: Int!
  updatedAt: DateTime!
}

input UpdateExpenseInput {
  amount: Float
  category: ExpenseCategory
  dateSpent: DateTime
  note: String
}

type User {
  createdAt: DateTime!
  email: String!
  firstName: String!
  id: String!
  lastName: String!
  password: String!
  pois: [Poi!]!
  trips: [Trip!]!
  type: UserType!
  updatedAt: DateTime!
}

enum UserType {
  BUSINESS_OPERATOR
  TRAVELER
}